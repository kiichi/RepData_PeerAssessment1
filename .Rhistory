sl<-iris$Sepal.Length
sw<-iris$Sepal.Width
sepal<-data.frame(sl=sl,sw=sw)
d<-dist(sepal)
# str(d)
# Class 'dist'  atomic [1:1225] 0.539 0.5 0.64 0.141 0.5 ...]
c<-hclust(d)
plot(c) #see cluster1.png
# fyi, here is the x-y plot
# xy.png
plot(sl,sw,col=c("red","blue","green")[iris$Species])
plot(as.phylo(c), type = "fan")
install.packages("ape")
library(ape)
# cladogram
plot(as.phylo(hc), type="cladogram", cex = 0.9, label.offset = 1)
library(ape)
plot(as.phylo(c), type="cladogram", cex = 0.9, label.offset = 1)
plot(as.phylo(c), type="cladogram", cex = 0.9, label.offset = 1)
plot(as.phylo(c), type = "fan")
mypal = c("#556270", "#4ECDC4", "#1B676B", "#FF6B6B", "#C44D58")
clus5 = cutree(hc, 5)
op = par(bg="#E8DDCB")
plot(as.phylo(hc), type = "fan", tip.color = mypal[clus5], label.offset = 1,
cex = log(mtcars$mpg,10), col = "red")
mypal = c("#556270", "#4ECDC4", "#1B676B", "#FF6B6B", "#C44D58")
clus5 = cutree(hc, 5)
op = par(bg="#E8DDCB")
plot(as.phylo(c), type = "fan", tip.color = mypal[clus5], label.offset = 1,
cex = log(mtcars$mpg,10), col = "red")
mypal = c("#556270", "#4ECDC4", "#1B676B", "#FF6B6B", "#C44D58")
clus5 = cutree(c, 5)
op = par(bg="#E8DDCB")
plot(as.phylo(c), type = "fan", tip.color = mypal[clus5], label.offset = 1,
cex = log(mtcars$mpg,10), col = "red")
mypal = c("#556270", "#4ECDC4", "#1B676B")
clus5 = cutree(c, 5)
op = par(bg="#E8DDCB")
plot(as.phylo(c), type = "fan", tip.color = mypal[clus5], label.offset = 1,
mypal = c("#556270", "#4ECDC4", "#1B676B")
clus5 = cutree(c, 5)
op = par(bg="#E8DDCB")
plot(as.phylo(c), type = "fan", tip.color = mypal[clus5], label.offset = 1,
mypal = c("#556270", "#4ECDC4", "#1B676B")
clus5 = cutree(c, 1)
op = par(bg="#E8DDCB")
plot(as.phylo(c), type = "fan", tip.color = mypal[clus5], label.offset = 1,cex = log(mtcars$mpg,10), col = "red")
mypal = c("#556270", "#4ECDC4", "#1B676B")
clus5 = cutree(c, 3)
op = par(bg="#E8DDCB")
plot(as.phylo(c), type = "fan", tip.color = mypal[clus5], label.offset = 1,cex = log(mtcars$mpg,10), col = "red")
mypal = c("#556270", "#4ECDC4", "#1B676B")
clus5 = cutree(c, 5)
op = par(bg="#E8DDCB")
plot(as.phylo(c), type = "fan", tip.color = mypal[clus5], label.offset = 1,cex = log(mtcars$mpg,10), col = "red")
mypal = c("#556270", "#4ECDC4", "#1B676B")
clus5 = cutree(c, 5)
op = par(bg="#E8DDCB")
plot(as.phylo(c), type = "fan", tip.color = mypal[clus5], label.offset = 1,cex = log(mtcars$mpg,10), col = "red")
mypal = c("#556270", "#4ECDC4", "#1B676B")
clus5 = cutree(c, 5)
op = par(bg="#E8DDCB")
plot(as.phylo(c), type = "fan", tip.color = mypal[clus5], label.offset = 1,cex = log(mtcars$mpg,1), col = "red")
mypal = c("#556270", "#4ECDC4", "#1B676B")
clus5 = cutree(c, 5)
op = par(bg="#E8DDCB")
plot(as.phylo(c), type = "fan", tip.color = mypal[clus5], label.offset = 1,cex = log(mtcars$mpg,15), col = "red")
plot(as.phylo(c), type = "fan", tip.color = mypal[clus5], label.offset = 10,cex = log(mtcars$mpg,10), col = "red")
plot(as.phylo(c), type = "fan", tip.color = mypal[clus5], label.offset = 0,cex = log(mtcars$mpg,10), col = "red")
plot(as.phylo(c), type = "fan", tip.color = mypal[clus5], label.offset = 0.5,cex = log(mtcars$mpg,10), col = "red")
mypal = c("#556270", "#4ECDC4", "#1B676B")
clus5 = cutree(c, 10)
op = par(bg="#E8DDCB")
plot(as.phylo(c), type = "fan", tip.color = mypal[clus5], label.offset = 0.5,cex = log(mtcars$mpg,10), col = "red")
plot(as.phylo(c), type = "fan")
#---------------------------------------------------------------------
# Distance Function and Hierarchical Cluster
library(datasets)
sl<-iris$Sepal.Length
sw<-iris$Sepal.Width
sepal<-data.frame(sl=sl,sw=sw)
d<-dist(sepal)
# str(d)
# Class 'dist'  atomic [1:1225] 0.539 0.5 0.64 0.141 0.5 ...]
c<-hclust(d)
plot(c) #see cluster1.png
plot(as.phylo(c), type = "fan")
# fyi, here is the x-y plot
# xy.png
plot(sl,sw,col=c("red","blue","green")[iris$Species])
library(ape)
#fan.png
plot(as.phylo(c), type = "fan")
heatmap(sepal)
sepal
heatmap(sepal)
heatmap(as.matrix(sepal))
as.matrix(sepal)
heatmap(as.matrix(iris[1:10,1:4]))
heatmap(as.matrix(iris[,1:4]))
heatmap(as.matrix(iris[,c(1,3)]))
heatmap(as.matrix(iris[,c(1,2,3)]))
heatmap(as.matrix(iris[,c(1,2,3,4)]))
heatmap(as.matrix(iris))
heatmap(as.matrix(iris[1:4]))
heatmap(as.matrix(iris[,1:4]))
heatmap(as.matrix(iris[,c(3,4)]))
heatmap(as.matrix(iris[,c(2,4)]))
heatmap(as.matrix(iris[,4]))
heatmap(as.matrix(iris[1:10,1:4]))
?heatmap
heatmap(as.matrix(iris[1:10,1:4]))
heatmap(as.matrix(iris[1:100,1:4]))
heatmap(as.matrix(iris[1:30,1:4]))
heatmap(as.matrix(iris[30:60,1:4]))
iris$Species
heatmap(as.matrix(iris[iris$Species=='virginica',1:4]))
heatmap(as.matrix(iris[iris$Species=='virginica',2:4]))
heatmap(as.matrix(iris[iris$Species=='virginica',1:4]))
heatmap(as.matrix(iris[,1:4]))
heatmap(as.matrix(iris[,1:4]))
k<-kmeans(sepal,centers)
k<-kmeans(sepal,centers=3)
names(k)
str(k)
plot(k)
plot(k)
plot(sl,sw,col=k$cluster)
plot(sl,sw,col=iris$Species)
k$cluster
plot(sl,sw,col=k$c("red","blue","green")[cluster])
plot(sl,sw,col=k$c("red","blue","green")[cluster])
plot(sl,sw,col=k$c("red","blue","green")[cluster])
plot(sl,sw,col=k$c("red","blue","green")[cluster])
plot(sl,sw,col=k$c("red","blue","green")[cluster])
plot(sl,sw,col=k$c("red","blue","green")[cluster])
plot(sl,sw,col=c("red","blue","green")[k$cluster])
plot(sl,sw,col=c("green","blue","green")[k$cluster])
plot(sl,sw,col=c("green","red","blue")[k$cluster])
plot(sl,sw,col=c("red","red","blue")[k$cluster])
plot(sl,sw,col=c("red","red","red")[k$cluster])
plot(sl,sw,col=c("red","blue","red")[k$cluster])
plot(sl,sw,col=c("blue","green","red")[k$cluster])
par(mfrow = c(1, 2))
plot(sl,sw,col=c("red","blue","green")[iris$Species])
plot(sl,sw,col=c("blue","green","red")[k$cluster])
plot(sl,sw,col=c("red","blue","green")[iris$Species],main="xy-plot")
par(mfrow = c(1, 2))
plot(sl,sw,col=c("red","blue","green")[iris$Species],main="xy-plot")
plot(sl,sw,col=c("blue","green","red")[k$cluster],main="k-means")
image(t(as.matrix(sepal))[, order(k$cluster)], yaxt = "n")
par(mfrow = c(1, 2))
image(t(as.matrix(sepal))[, nrow(as.matrix(sepal)):1], yaxt = "n")
image(t(as.matrix(sepal))[,order(k$cluster)], yaxt = "n")
smini<-as.matrix(sepal[1:30])
par(mfrow = c(1, 2))
image(t(smini)[, nrow(smini:1], yaxt = "n")
image(t(smini[,order(k$cluster)], yaxt = "n")
smini<-as.matrix(sepal[1:30])
par(mfrow = c(1, 2))
image(t(smini)[, nrow(smini:1], yaxt = "n")
image(t(smini[,order(k$cluster)], yaxt = "n")
;
smini<-as.matrix(sepal[1:30])
par(mfrow = c(1, 2))
image(t(smini)[, nrow(smini):1], yaxt = "n")
image(t(smini[,order(k$cluster)], yaxt = "n")
;
smini<-as.matrix(sepal[1:30])
par(mfrow = c(1, 2))
image(t(smini)[, nrow(smini):1], yaxt = "n")
image(t(smini)[,order(k$cluster)], yaxt = "n")
smini<-as.matrix(sepal[1:30])
smini<-as.matrix(sepal[1:30,])
par(mfrow = c(1, 2))
image(t(smini)[, nrow(smini):1], yaxt = "n")
image(t(smini)[,order(k$cluster)], yaxt = "n")
smini<-as.matrix(sepal[1:30,])
k2<-kmeans(smini,centers=3)
par(mfrow = c(1, 2))
image(t(smini)[, nrow(smini):1], yaxt = "n")
image(t(smini)[,order(k2$cluster)], yaxt = "n")
par(mfrow = c(1, 1))
par(mar = rep(0.2, 4))
image(1:10, 1:40, t(smini)[, nrow(smini):1])
par(mfrow = c(1, 1))
par(mar = rep(0.2, 4))
image(1:10, 1:40, t(sepal)[, nrow(sepal):1])
image(1:10, 1:2, t(sepal)[, nrow(sepal):1])
image(1:2, 1:2, t(sepal)[, nrow(sepal):1])
par(mfrow = c(1, 1))
par(mar = rep(0.2, 4))
heatmap(smini)
par(mfrow = c(1, 1))
par(mar = rep(0.2, 4))
heatmap(sepal)
par(mfrow = c(1, 1))
par(mar = rep(0.2, 4))
heatmap(sepal[,1:4])
par(mfrow = c(1, 1))
par(mar = rep(0.2, 4))
heatmap(iris[,1:4])
iris[,1:4]
heatmap(iris[,1:4])
heatmap(iris[,1])
heatmap(as.matrix(iris[,1:4]))
par(mfrow = c(1, 1))
par(mar = rep(0.2, 4))
heatmap(as.matrix(iris[,1:4]))
heatmap(as.matrix(iris[,3:4]))
heatmap(as.matrix(iris[,2:4]))
heatmap(as.matrix(iris[,1:4]))
plot(rowMeans(iris))
plot(rowMeans(iris),1:150)
plot(rowMeans(sl),1:150)
plot(rowMeans(iris[,c(1,3)]),1:150)
plot(rowMeans(iris[,c(1,3)]),1:150)
plot(colMeans(iris[,c(1,3)]),)
plot(rowMeans(iris[,c(1,2,3,4)]),1:150)
plot(colMeans(iris[,c(1,2,3,4)]),)
plot(rowMeans(iris[,c(1,3)]),1:150)
plot(colMeans(iris[,c(1,3)]),)
par(mfrow = c(2, 1))
plot(rowMeans(iris[,c(1,3)]),1:150)
plot(colMeans(iris[,c(1,3)]),)
par(mfrow = c(1, 2))
plot(rowMeans(iris[,c(1,3)]),1:150)
plot(colMeans(iris[,c(1,3)]),)
plot(colMeans(irisw]))
plot(colMeans(irisw))
irisw<-iris[,c(1,3)]
plot(rowMeans(irisw),1:150)
plot(colMeans(irisw))
par(mfrow = c(1, 2))
plot(rowMeans(irisw),1:150)
plot(colMeans(irisw))
?svd
svd(irisw)
s1<-svd(irisw)
svd$u[,1]
s1$u[,1]
plot(s1$u[,1])
par(mfrow = c(1, 2))
plot(s1$u[,1],1:150)
plot(s1$v[,1])
irisw<-iris[,c(1,3)]
par(mfrow = c(1, 2))
plot(rowMeans(irisw),1:150)
plot(colMeans(irisw))
par(mfrow = c(1, 2))
plot(s1$u[,1],1:150)
plot(s1$v[,1])
par(mfrow = c(1, 2))
plot(s1$u[,1],150:1)
plot(s1$v[,1])
plot(s1$v[,1],2:1)
par(mfrow = c(1, 2))
plot(s1$u[,1],150:1)
plot(s1$v[,1],2:1)
irisw<-iris[,c(1,3)]
par(mfrow = c(1, 2))
plot(rowMeans(irisw),1:150)
plot(colMeans(irisw))
s1<-svd(irisw)
par(mfrow = c(1, 2))
plot(s1$u[,1],150:1)
plot(s1$v[,1],2:1)
?svd
plo(s1$d)
par(mfrow = c(1, 1))
plot(s1$d)
s1<-svd(scale(irisw))
par(mfrow = c(1, 2))
plot(s1$u[,1],150:1)
plot(s1$v[,1],2:1)
library(dataset)
library(datasets)
plot(sl,sw,col=heat.colors())
sl<-iris$Sepal.Length
sw<-iris$Sepal.Width
sepal<-data.frame(sl=sl,sw=sw)
plot(sl,sw,col=heat.colors())
plot(sl,sw,col=heat.colors(sl))
plot(sl,sw,col=heat.colors(sl),ph=1)
par(mfrow = c(1, 1))
plot(sl,sw,col=heat.colors(sl),ph=1)
plot(sl,sw,col=heat.colors(sl),ph=2)
plot(sl,sw,col=heat.colors(sl),ph=19)
warnings()
?plot
plot(sl,sw,col=heat.colors(sl),ps=19)
plot(sl,sw,col=heat.colors(sl),ps=2)
plot(sl,sw,col=heat.colors(sl),cex=2)
plot(sl,sw,col=heat.colors(sl),cex=10)
plot(sl,sw,col=heat.colors(sl),pch=10)
plot(sl,sw,col=heat.colors(sl),pch=2)
plot(sl,sw,col=heat.colors(sl),pch=3)
plot(sl,sw,col=heat.colors(sl),pch=19)
plot(sl,sw,col=heat.colors(sl),pch=19,bg="gray")
plot(sl,sw,col=heat.colors(sl),pch=18,cex=10)
plot(sl,sw,col=heat.colors(sl),pch=17,cex=10)
plot(sl,sw,col=heat.colors(sl),pch=15,cex=10)
plot(sl,sw,col=heat.colors(sl),pch=15,cex=4)
source('~/.active-rstudio-document', echo=TRUE)
par(bg="gray")
plot(sl,sw,col=heat.colors(sl),pch=15,cex=4)
par(bg="yellow")
plot(sl,sw,col=heat.colors(sl),pch=15,cex=4)
par(bg="lightgray")
plot(sl,sw,col=heat.colors(sl),pch=15,cex=4)
plot(sl,sw,col=c("red","blue","green")[iris$Species])
par(bg="lightgray")
plot(sl,sw,col=heat.colors(sl),pch=15,cex=3)
par(bg="lightgray")
plot(sl,sw,col=heat.colors(sl),pch=15,cex=3)
plot(sl,sw,col=c("red","blue","green")[iris$Species])
plot(sl,sw,col=c("red","blue","green")[iris$Species],pch=15,cex=3)
plot(sl,sw,col=c("red","blue","green")[iris$Species],pch=19,cex=3)
plot(sl,sw,col=heat.colors(sl),pch=19,cex=3)
plot(sl,sw,col=c("red","blue","green")[iris$Species],pch=19,cex=3)
par(bg="lightgray")
plot(sl,sw,col=heat.colors(sl),pch=19,cex=3)
plot(sl,sw,col=topo.colors(sl),pch=19,cex=3)
plot(sl,sw,col=colorRamp(c("red","blue"))(sl),pch=19,cex=3)
cpal<-colorRamp(c("red","blue"))
cpal(1)
cpal(0)
cpal(0.5)
plot(sl,sw,col=cpal(sl/max(sl)),pch=19,cex=3)
cpa2l<-colorRampPalette(c("red","blue"))
cpal(1)
cpal(0)
cpal(0.5)
cpa2<-colorRampPalette(c("red","blue"))
cpal2(1)
cpal2(0)
cpal2(0.5)
cpal2<-colorRampPalette(c("red","blue"))
cpal2(1)
cpal2(0)
cpal2(0.5)
cpal2(100)
cpal2(2)
cpal2(10)
library(RColorBrewer)
colors <- brewer.pal(3, "BuGn")
colors
pale <- colorRampPalette(colors)
source('~/.active-rstudio-document', echo=TRUE)
smoothscatter(volcano)
smoothScatter(volcano)
smoothScatter(sepal)
smoothScatter(sepal,col=pale(20))
smoothScatter(sepal,col=heat.color())
smoothScatter(sepal,col=heat.color())
smoothScatter(sepal,col=heat.colors())
smoothScatter(sepal,col=c("red","blue")
smoothScatter(sepal,col=c("red","blue"))
?smoothScatter
smoothScatter(sepal,col="red")
smoothScatter(sepal)
?smoothScatter
library(dataset)
library(datasets)
data<-iris[1:4,]
head(data)
data<-iris[,1:4]
data
?prcomp
c<-prcomp(data,scale=T)
c
c$x
c$x[,1]
summary(c)
s<-summary(c)
s$importance
s$importance[3,2]
per<-s$importance[3,2]*100
per
plot
?plot
plot(c1,c2,col=factor(iris[,5]),main=per,sub="Contribution in %")
c1<-c$x[,1]
per<-s$importance[3,2]*100
#####################################
# Principal Component Analsys
#
# PCA is a way to crunch multi dimension data
# into smaller number (e.g. 2 dim) without losing the
# characteristics of the data. After reducing the dim,
# we can plot them to visualize the data, just like x-y
# and colorize them by their categories.
#
# SVD is the algorithm to use, and we will look at the
# first and second compoent.
#####################################
library(datasets)
# Extract Sepal Length, Sepal Width, Petal Length and Petal Width
data<-iris[,1:4]
c<-prcomp(data,scale=T)
#                   PC1         PC2        PC3        PC4
# Sepal.Length  0.5210659 -0.37741762  0.7195664  0.2612863
# Sepal.Width  -0.2693474 -0.92329566 -0.2443818 -0.1235096
# Petal.Length  0.5804131 -0.02449161 -0.1421264 -0.8014492
# Petal.Width   0.5648565 -0.06694199 -0.6342727  0.5235971
# First Component
c1<-c$x[,1]
# Second Component
c2<-c$x[,2]
# Summary
s<-summary(c)
# Importance of components:
#   PC1    PC2     PC3     PC4
# Standard deviation     1.7084 0.9560 0.38309 0.14393
# Proportion of Variance 0.7296 0.2285 0.03669 0.00518
# Cumulative Proportion  0.7296 0.9581 0.99482 1.00000
# Contribution
per<-s$importance[3,2]*100
# Draw XY
plot(c1,c2,col=factor(iris[,5]),main=per,sub="Contribution in %")
plot(c1,c2,col=factor(iris[,5]),main=sprintf("Contribution: %f %%",per))
plot(c1,c2,col=factor(iris[,5]),main=sprintf("Contribution: %.2f %%",per))
# Contribution for the Cumulative Propotion (*)
# by crunch dimensional data into two.
install.packages("knitr")
install.packages("knitrBootstrap")
install.packages("slidify")
install.packages("markdown")
library(dataset)
library(datasets)
```
data(airquality)
summary(airquality)
pairs(airquality)
library(stats)
fit <- lm(Ozone ~ Solar.R + Wind + Temp, dataset= airquality)
summary(fit)
```
summary(fit)
fit <- lm(Ozone ~ Solar.R + Wind + Temp, data = airquality)
summary(fit)
* And so on.
library(knitr)
setwd(".")
getwd()
setwd("~/work/r/class/datasciencecoursera/notes/class5_repdata/week2")
setwd("~/work/r/class/datasciencecoursera/notes/class5_repdata/week2")
browseURL("Rmarkdown_exerciese.html")
# This is an example to run knitr programmatically
library(knitr)
# This is an example to run knitr programmatically
library(knitr)
setwd("~/work/r/class/datasciencecoursera/notes/class5_repdata/week2")
knit2html("Rmarkdown_exerciese.Rmd")
browseURL("Rmarkdown_exerciese.html")
```{r mycodechunk}
a<-rnorm(100)
-- hello
#hello
You should not see code chunk below:
```{r hiddenchunk,echo=FALSE,results='hide'}
print(a)
```
```{r computetime}
```{r computetime,ecno=FALSE}
a<-rnorm(10)
rval<-rnorm(1)
```{r fig.height=4}
print(xt,type='html')
#print(xt,type='html')
print(xt,type='html')
print(xt,type='html')
x
xt
xt <- xtable(summary(fit))
install.packages("xtable")
# Install xtable package
opts_chunk$set(echo=FALSE,results="hide")
```{r}
```{r setoptions,echo=FALSE}
#opts_chunk$set(echo=FALSE,results="hide")
opts_chunk$set(echo=FALSE,results="hide")
```{r hiddenchunk,echo=FALSE,results='hide',cache=TRUE}
install.packages("filehash")
unzip("activity.zip")
unzip("activity.zip")
setwd("~/work/r/class/RepData_PeerAssessment1")
setwd("~/work/r/class/RepData_PeerAssessment1")
unzip("activity.zip")
findSourceTraceback()
getwd()
setwd("~/work/r/class/RepData_PeerAssessment1")
setwd("~/work/r/class/RepData_PeerAssessment1")
if (!file.exists("activity.csv")){
unzip("activity.zip")
}
setwd("~/work/r/class/RepData_PeerAssessment1")
if (!file.exists("activity.csv")){
unzip("activity.zip")
}
read.csv("activity.csv")
read.csv("activity.csv")
```{r echo=TRUE,results='hide'}
Next, read the data file:
======read.csv("activity.csv")
data<-read.csv("activity.csv")
print(summary(data))
hist(data)
hist(data)
hist(data$steps)
```{r echo=TRUE}
# Pre-processing might go here....
