par(mfrow = c(1, 2))
image(t(smini)[, nrow(smini:1], yaxt = "n")
image(t(smini[,order(k$cluster)], yaxt = "n")
smini<-as.matrix(sepal[1:30])
par(mfrow = c(1, 2))
image(t(smini)[, nrow(smini:1], yaxt = "n")
image(t(smini[,order(k$cluster)], yaxt = "n")
;
smini<-as.matrix(sepal[1:30])
par(mfrow = c(1, 2))
image(t(smini)[, nrow(smini):1], yaxt = "n")
image(t(smini[,order(k$cluster)], yaxt = "n")
;
smini<-as.matrix(sepal[1:30])
par(mfrow = c(1, 2))
image(t(smini)[, nrow(smini):1], yaxt = "n")
image(t(smini)[,order(k$cluster)], yaxt = "n")
smini<-as.matrix(sepal[1:30])
smini<-as.matrix(sepal[1:30,])
par(mfrow = c(1, 2))
image(t(smini)[, nrow(smini):1], yaxt = "n")
image(t(smini)[,order(k$cluster)], yaxt = "n")
smini<-as.matrix(sepal[1:30,])
k2<-kmeans(smini,centers=3)
par(mfrow = c(1, 2))
image(t(smini)[, nrow(smini):1], yaxt = "n")
image(t(smini)[,order(k2$cluster)], yaxt = "n")
par(mfrow = c(1, 1))
par(mar = rep(0.2, 4))
image(1:10, 1:40, t(smini)[, nrow(smini):1])
par(mfrow = c(1, 1))
par(mar = rep(0.2, 4))
image(1:10, 1:40, t(sepal)[, nrow(sepal):1])
image(1:10, 1:2, t(sepal)[, nrow(sepal):1])
image(1:2, 1:2, t(sepal)[, nrow(sepal):1])
par(mfrow = c(1, 1))
par(mar = rep(0.2, 4))
heatmap(smini)
par(mfrow = c(1, 1))
par(mar = rep(0.2, 4))
heatmap(sepal)
par(mfrow = c(1, 1))
par(mar = rep(0.2, 4))
heatmap(sepal[,1:4])
par(mfrow = c(1, 1))
par(mar = rep(0.2, 4))
heatmap(iris[,1:4])
iris[,1:4]
heatmap(iris[,1:4])
heatmap(iris[,1])
heatmap(as.matrix(iris[,1:4]))
par(mfrow = c(1, 1))
par(mar = rep(0.2, 4))
heatmap(as.matrix(iris[,1:4]))
heatmap(as.matrix(iris[,3:4]))
heatmap(as.matrix(iris[,2:4]))
heatmap(as.matrix(iris[,1:4]))
plot(rowMeans(iris))
plot(rowMeans(iris),1:150)
plot(rowMeans(sl),1:150)
plot(rowMeans(iris[,c(1,3)]),1:150)
plot(rowMeans(iris[,c(1,3)]),1:150)
plot(colMeans(iris[,c(1,3)]),)
plot(rowMeans(iris[,c(1,2,3,4)]),1:150)
plot(colMeans(iris[,c(1,2,3,4)]),)
plot(rowMeans(iris[,c(1,3)]),1:150)
plot(colMeans(iris[,c(1,3)]),)
par(mfrow = c(2, 1))
plot(rowMeans(iris[,c(1,3)]),1:150)
plot(colMeans(iris[,c(1,3)]),)
par(mfrow = c(1, 2))
plot(rowMeans(iris[,c(1,3)]),1:150)
plot(colMeans(iris[,c(1,3)]),)
plot(colMeans(irisw]))
plot(colMeans(irisw))
irisw<-iris[,c(1,3)]
plot(rowMeans(irisw),1:150)
plot(colMeans(irisw))
par(mfrow = c(1, 2))
plot(rowMeans(irisw),1:150)
plot(colMeans(irisw))
?svd
svd(irisw)
s1<-svd(irisw)
svd$u[,1]
s1$u[,1]
plot(s1$u[,1])
par(mfrow = c(1, 2))
plot(s1$u[,1],1:150)
plot(s1$v[,1])
irisw<-iris[,c(1,3)]
par(mfrow = c(1, 2))
plot(rowMeans(irisw),1:150)
plot(colMeans(irisw))
par(mfrow = c(1, 2))
plot(s1$u[,1],1:150)
plot(s1$v[,1])
par(mfrow = c(1, 2))
plot(s1$u[,1],150:1)
plot(s1$v[,1])
plot(s1$v[,1],2:1)
par(mfrow = c(1, 2))
plot(s1$u[,1],150:1)
plot(s1$v[,1],2:1)
irisw<-iris[,c(1,3)]
par(mfrow = c(1, 2))
plot(rowMeans(irisw),1:150)
plot(colMeans(irisw))
s1<-svd(irisw)
par(mfrow = c(1, 2))
plot(s1$u[,1],150:1)
plot(s1$v[,1],2:1)
?svd
plo(s1$d)
par(mfrow = c(1, 1))
plot(s1$d)
s1<-svd(scale(irisw))
par(mfrow = c(1, 2))
plot(s1$u[,1],150:1)
plot(s1$v[,1],2:1)
library(dataset)
library(datasets)
plot(sl,sw,col=heat.colors())
sl<-iris$Sepal.Length
sw<-iris$Sepal.Width
sepal<-data.frame(sl=sl,sw=sw)
plot(sl,sw,col=heat.colors())
plot(sl,sw,col=heat.colors(sl))
plot(sl,sw,col=heat.colors(sl),ph=1)
par(mfrow = c(1, 1))
plot(sl,sw,col=heat.colors(sl),ph=1)
plot(sl,sw,col=heat.colors(sl),ph=2)
plot(sl,sw,col=heat.colors(sl),ph=19)
warnings()
?plot
plot(sl,sw,col=heat.colors(sl),ps=19)
plot(sl,sw,col=heat.colors(sl),ps=2)
plot(sl,sw,col=heat.colors(sl),cex=2)
plot(sl,sw,col=heat.colors(sl),cex=10)
plot(sl,sw,col=heat.colors(sl),pch=10)
plot(sl,sw,col=heat.colors(sl),pch=2)
plot(sl,sw,col=heat.colors(sl),pch=3)
plot(sl,sw,col=heat.colors(sl),pch=19)
plot(sl,sw,col=heat.colors(sl),pch=19,bg="gray")
plot(sl,sw,col=heat.colors(sl),pch=18,cex=10)
plot(sl,sw,col=heat.colors(sl),pch=17,cex=10)
plot(sl,sw,col=heat.colors(sl),pch=15,cex=10)
plot(sl,sw,col=heat.colors(sl),pch=15,cex=4)
source('~/.active-rstudio-document', echo=TRUE)
par(bg="gray")
plot(sl,sw,col=heat.colors(sl),pch=15,cex=4)
par(bg="yellow")
plot(sl,sw,col=heat.colors(sl),pch=15,cex=4)
par(bg="lightgray")
plot(sl,sw,col=heat.colors(sl),pch=15,cex=4)
plot(sl,sw,col=c("red","blue","green")[iris$Species])
par(bg="lightgray")
plot(sl,sw,col=heat.colors(sl),pch=15,cex=3)
par(bg="lightgray")
plot(sl,sw,col=heat.colors(sl),pch=15,cex=3)
plot(sl,sw,col=c("red","blue","green")[iris$Species])
plot(sl,sw,col=c("red","blue","green")[iris$Species],pch=15,cex=3)
plot(sl,sw,col=c("red","blue","green")[iris$Species],pch=19,cex=3)
plot(sl,sw,col=heat.colors(sl),pch=19,cex=3)
plot(sl,sw,col=c("red","blue","green")[iris$Species],pch=19,cex=3)
par(bg="lightgray")
plot(sl,sw,col=heat.colors(sl),pch=19,cex=3)
plot(sl,sw,col=topo.colors(sl),pch=19,cex=3)
plot(sl,sw,col=colorRamp(c("red","blue"))(sl),pch=19,cex=3)
cpal<-colorRamp(c("red","blue"))
cpal(1)
cpal(0)
cpal(0.5)
plot(sl,sw,col=cpal(sl/max(sl)),pch=19,cex=3)
cpa2l<-colorRampPalette(c("red","blue"))
cpal(1)
cpal(0)
cpal(0.5)
cpa2<-colorRampPalette(c("red","blue"))
cpal2(1)
cpal2(0)
cpal2(0.5)
cpal2<-colorRampPalette(c("red","blue"))
cpal2(1)
cpal2(0)
cpal2(0.5)
cpal2(100)
cpal2(2)
cpal2(10)
library(RColorBrewer)
colors <- brewer.pal(3, "BuGn")
colors
pale <- colorRampPalette(colors)
source('~/.active-rstudio-document', echo=TRUE)
smoothscatter(volcano)
smoothScatter(volcano)
smoothScatter(sepal)
smoothScatter(sepal,col=pale(20))
smoothScatter(sepal,col=heat.color())
smoothScatter(sepal,col=heat.color())
smoothScatter(sepal,col=heat.colors())
smoothScatter(sepal,col=c("red","blue")
smoothScatter(sepal,col=c("red","blue"))
?smoothScatter
smoothScatter(sepal,col="red")
smoothScatter(sepal)
?smoothScatter
library(dataset)
library(datasets)
data<-iris[1:4,]
head(data)
data<-iris[,1:4]
data
?prcomp
c<-prcomp(data,scale=T)
c
c$x
c$x[,1]
summary(c)
s<-summary(c)
s$importance
s$importance[3,2]
per<-s$importance[3,2]*100
per
plot
?plot
plot(c1,c2,col=factor(iris[,5]),main=per,sub="Contribution in %")
c1<-c$x[,1]
per<-s$importance[3,2]*100
#####################################
# Principal Component Analsys
#
# PCA is a way to crunch multi dimension data
# into smaller number (e.g. 2 dim) without losing the
# characteristics of the data. After reducing the dim,
# we can plot them to visualize the data, just like x-y
# and colorize them by their categories.
#
# SVD is the algorithm to use, and we will look at the
# first and second compoent.
#####################################
library(datasets)
# Extract Sepal Length, Sepal Width, Petal Length and Petal Width
data<-iris[,1:4]
c<-prcomp(data,scale=T)
#                   PC1         PC2        PC3        PC4
# Sepal.Length  0.5210659 -0.37741762  0.7195664  0.2612863
# Sepal.Width  -0.2693474 -0.92329566 -0.2443818 -0.1235096
# Petal.Length  0.5804131 -0.02449161 -0.1421264 -0.8014492
# Petal.Width   0.5648565 -0.06694199 -0.6342727  0.5235971
# First Component
c1<-c$x[,1]
# Second Component
c2<-c$x[,2]
# Summary
s<-summary(c)
# Importance of components:
#   PC1    PC2     PC3     PC4
# Standard deviation     1.7084 0.9560 0.38309 0.14393
# Proportion of Variance 0.7296 0.2285 0.03669 0.00518
# Cumulative Proportion  0.7296 0.9581 0.99482 1.00000
# Contribution
per<-s$importance[3,2]*100
# Draw XY
plot(c1,c2,col=factor(iris[,5]),main=per,sub="Contribution in %")
plot(c1,c2,col=factor(iris[,5]),main=sprintf("Contribution: %f %%",per))
plot(c1,c2,col=factor(iris[,5]),main=sprintf("Contribution: %.2f %%",per))
# Contribution for the Cumulative Propotion (*)
# by crunch dimensional data into two.
install.packages("knitr")
install.packages("knitrBootstrap")
hist(data$steps)
data<-read.csv("activity.csv")
setwd("~/work/r/class/RepData_PeerAssessment1")
setwd("~/work/r/class/RepData_PeerAssessment1")
data<-read.csv("activity.csv")
hist(data$steps)
head(data)
data
summary(data)
class(data)
fread("activity.csv")
library(datatable)
data<-fread("activity.csv")
library("data.table", lib.loc="/Library/Frameworks/R.framework/Versions/3.0/Resources/library")
library(data.table)
data<-fread("activity.csv")
data
data$steps
data[,,]
data[,,by=data]
data[,,by=date]
data[,.N,by=date]
count(data[,,by=date])
head(data[,,by=date])
head(data[,.N,by=date])
data[,.N,by=date]
data[,.N,by=date]
data<-fread("activity.csv")
library(ggplot2)
ggplot(data)
library(ggplot2)
ggplot(as.data.frame(data))
data
as.data.frame(data)
data<-read.csv("activity.csv")
head(data)
library(data.table)
data<-fread("activity.csv")
data[,]
data[,list(total=sum(steps)),by=date]
data[,list(total=sum(steps)),by=date]
sum
?sum
data[,list(total=sum(steps,na.rm=T)),by=date]
data_by_date <- data[,list(total=sum(steps,na.rm=T)),by=date]
data_by_date <- data[,list(total=sum(steps,na.rm=T)),by=date]
data[,list(total=sum(steps,na.rm=T)),by=date]
data_by_date
hist(data_by_date)
hist(data_by_date$total)
mean(data_by_date$total)
median(data_by_date$total)
summary(data_by_date$total)
source('~/.active-rstudio-document', echo=TRUE)
plot(data_by_date)
plot(data_by_date$date,data_by_date$total)
data_by_date$date
data_by_date$total
count(c('1'))
length(c('1'))
length(data_by_date$total)
length(data_by_date$date)
aggregate
?aggregate
data<-read.csv("activity.csv")
data<-fread("activity.csv")
#data<-read.csv("activity.csv")
data_by_date <- data[,list(total=sum(steps,na.rm=T)),by=date]
ggplot(data_by_date, aes(x = factor(date), y = total)) + geom_bar(stat = "identity")
?geom_bar
ggplot(data_by_date, aes(x = factor(date), y = tota)) + geom_bar(stat = "identity")
ggplot(data_by_date, aes(x = factor(date), y = total)) + geom_bar(stat = "identity")
data_by_date
ggplot(data_by_date, aes(x = factor(date), y = total)) + geom_bar(stat = "identity") + coord_flip()
ggplot(data_by_date, aes(x = date, y = total)) + geom_bar(stat = "identity") + coord_flip()
ggplot(data_by_date, aes(x = factor(date), y = total)) + geom_bar(stat = "identity") + coord_flip()
ggplot(data_by_date, aes(x=date, y=total)) + geom_bar(stat = "identity") + coord_flip()
data_by_date
ggplot(data_by_date, aes(x=date, y=total)) + geom_bar(stat = "identity",fill=factor(date)) + coord_flip()
ggplot(data_by_date, aes(x=date, y=total)) + geom_bar(stat = "identity",fill=date) + coord_flip()
ggplot(data_by_date, aes(x=date, y=total, fill=date)) + geom_bar(stat = "identity") + coord_flip()
library(data.table)
data<-fread("activity.csv")
#data<-read.csv("activity.csv")
sum_by_date <- data[,list(total=sum(steps,na.rm=T)),by=date]
print(sum_by_date)
mean_by_date <- data[,list(total=mean(steps,na.rm=T)),by=date]
print(mean_by_date)
median_by_date <- data[,list(total=median(steps,na.rm=T)),by=date]
print(median_by_date)
median
?median
median_by_date <- data[,list(total=median(steps,na.rm=T)),by=date]
print(median_by_date)
mean_by_date <- data[,list(total=mean(steps,na.rm=T)),by=date]
print(mean_by_date)
median_by_date <- data[,list(total=median(steps,na.rm=T)),by=date]
print(median_by_date)
mean_by_date <- data[,list(total=mean(steps,na.rm=T)),by=date]
print(median_by_date)
median_by_date <- data[,list(total=median(steps,na.rm=T)),by=date]
median_by_date <- data[,list(total=median(steps,na.rm=T)),by=date]
median_by_date <- data[,list(total=median(steps,na.rm=T)),by=date]
data
median_by_date2 <- data[,list(total=median(steps,na.rm=T)),by=date]
median_by_date <- data[,list(total=median(steps,na.rm=T)),by=date]
median_by_date <- data[,list(total=median(steps,na.rm=T)),by=date]
median_by_date <- data[,list(total=median(steps,na.rm=T)),by=date]
median_by_date <- data[,list(total=median(steps,na.rm=T)),by=date]
median_by_date <- data[,list(total=median(steps,na.rm=T)),by=date]
mean_by_date <- data[,list(total=mean(steps,na.rm=T)),by=date]
print(mean_by_date)
ggplot(mean_by_date, aes(x=date, y=total, fill=date)) + geom_bar(stat = "identity") + coord_flip()
date
summary(date)
summary(date)
summary(data)
median_by_date <- data[,list(total=median(steps,na.rm=T)),by=date]
data
head(data,100)
median
median(c(1,2,3,4,5,5,63,3,43,5,6,3))
median(data$steps)
median(data$steps,na.rm=T)
median_by_date <- data[data$steps>0,list(total=median(steps,na.rm=T)),by=date]
data$steps>0
isna
data[data$steps>0 && !is.na(data$steps),list(total=median(steps,na.rm=T)),by=date]
data$steps>0 && !is.na(data$steps)
data$steps>0 && data$steps != na
data$steps>0 && data$steps != NA
data$steps>0
data$steps>0 & data$steps != NA
data$steps>0 && data$steps != NA
data$steps>0 & data$steps != NA
is.na(data$steps)
!is.na(data$steps) & data$steps>0
mean_by_date
mean_by_date <- data[,list(total=mean(steps,na.rm=T)),by=date]
mean_by_date
data['2012-10-03',]
data[date='2012-10-03',]
data[data$date='2012-10-03',]
data[data$date=='2012-10-03',]
data[date=='2012-10-03',]
data[date=='2012-10-03',]
median(data[date=='2012-10-03',],na.rm=T)
median(data[date=='2012-10-03',steps],na.rm=T)
median(data[date=='2012-10-04',steps],na.rm=T)
median(data[date=='2012-10-05',steps],na.rm=T)
median(data[date=='2012-10-03',steps],na.rm=T)
data[date=='2012-10-03',steps],na.rm=T
data[date=='2012-10-03',steps]
order
?order
?orderby
sort(data[date=='2012-10-03',steps])
median(sort(data[date=='2012-10-03',steps]))
median(sort(data[date=='2012-10-03' && steps!=0,steps]))
sort(data[date=='2012-10-03' && steps!=0,steps])
sort(data[date=='2012-10-03' & steps!=0,steps])
meadian(sort(data[date=='2012-10-03' & steps!=0,steps]))
median(sort(data[date=='2012-10-03' & steps!=0,steps]))
sort(data[date=='2012-10-03'])
mean_total <- mean(sum_by_date$total)
median_total <- median(sum_by_date$total)
mean_total
mean_total
median_total <- median(sum_by_date$total)
sum_by_date
median_total <- median(sum_by_date$total)
median_total
library(data.table)
data<-fread("activity.csv")
#data<-read.csv("activity.csv")
sum_by_date <- data[,list(total=sum(steps,na.rm=T)),by=date]
#print(sum_by_date)
ggplot(sum_by_date, aes(x=date, y=total)) + geom_bar(stat = "identity") + coord_flip()
mean_total <- mean(sum_by_date$total)
median_total <- median(sum_by_date$total)
ggplot(sum_by_date, aes(x=date, y=total))
+ geom_bar(stat = "identity")
+ coord_flip()
ggplot(sum_by_date, aes(x=date, y=total)) + geom_bar(stat = "identity") + coord_flip() + scale_x_reverse()
library(ggplot2)
sum_by_date <- data[,list(total=sum(steps,na.rm=T)),by=date]
ggplot(sum_by_date, aes(x=date, y=total)) + geom_bar(stat = "identity") + coord_flip() + scale_x_reverse()
?sort
sum_by_date
data
data$interval
plot(data$interval,data$steps)
data[,list(total=sum(steps,na.rm=T)),by=date,interval]
data[,list(total=sum(steps,na.rm=T)),by=c('date','interval')]
data[,list(total=sum(steps,na.rm=T)),by=interval]
data[,list(total=mean(steps,na.rm=T)),by=interval]
data[,list(avg=mean(steps,na.rm=T)),by=interval]
avg_interval <- data[,list(avg=mean(steps,na.rm=T)),by=interval]
avg_interval
plot(avg_interval)
ggplot(data=avg_interval,aes(x=interval,y=avg)) + geom_line()
max(avg_interval$avg)
avg_interval[avg==max(avg_interval$avg),]
mean(sum_by_date$total)
length(is.na(data$steps))
length(!is.na(data$steps))
length(is.na(data$steps)==T)
length(is.na(data$steps)==F)
head(data$steps,100)
head(data$steps,1000)
head(data$steps,1000)
data$steps==T
is.na(data$steps)
head(is.na(data$steps),1000)
sum(is.na(data$steps))
sum(!is.na(data$steps))
sum(is.na(data$steps))
is.na(data$steps)
data
data[is.na(data$steps),steps] = mean(sum_by_date$total)
data[is.na(data$steps),steps] <- mean(sum_by_date$total)
data[is.na(data$steps),c('steps')] <- mean(sum_by_date$total)
data
head(data,1000)
head(data,100)
data<-fread("activity.csv")
data
data
badone<-is.na(data$steps)
badone
data[badone,]
data[!badone,]
data[badone,]
mean_by_date <- data[,list(total=sum(steps,na.rm=T)),by=date]
mean_by_date <- data[,list(total=mean(steps,na.rm=T)),by=date]
mean_by_date
mean_by_date <- data[,list(total=mean(steps,na.rm=T)),by=date]
data[badone,steps]
mean_by_date <- data[,list(total=mean(steps,na.rm=T)),by=date]
mean_by_date
data
